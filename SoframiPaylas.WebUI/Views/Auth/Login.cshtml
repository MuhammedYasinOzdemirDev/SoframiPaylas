@model LoginViewModel

<div class="login-container">
    <h2 class="login-title">Giriş Yap</h2>
    <form method="post" class="login-form" id="loginForm">
        <div asp-validation-summary="All" class="text-danger"></div>
        <div class="form-group mb-3">
            <label asp-for="Email">E-posta:</label>
            <input type="email" id="Email" asp-for="Email" class="form-control">
            <span id="EmailError" class="text-danger"></span>
        </div>
        <div class="form-group mb-3">
            <label asp-for="Password">Şifre:</label>
            <input type="password" id="Password" asp-for="Password" class="form-control">
            <span id="PasswordError" class="text-danger"></span>
        </div>
        <button type="submit" class="btn btn-primary">Giriş Yap</button>
    </form>
</div>
@section Scripts{

<script>
    document.getElementById('loginForm').addEventListener('submit', function (event) {
        event.preventDefault();
        let isValid = true;

        isValid = validateField('Email', 'Email alanı gereklidir.', isValid);
        isValid = validateField('Password', 'Password alanı gereklidir.', isValid);

        if (isValid) {
            NProgress.start();
            var formData = new FormData(this);
            fetch('@Url.Action("Login", "Auth")', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        NProgress.done();
                        Swal.fire({
                            title: 'Giriş Başarılı!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                window.location.href = data.redirectUrl;  // Başarılı kayıt sonrası yönlendirme
                            }
                        });
                    } else {
                        NProgress.done();
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || "An error occurred.",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    NProgress.done();
                    console.error('Error:', error);
                    alert('Bir hata oluştu, lütfen daha sonra tekrar deneyiniz.');
                });
        }
    });


    // Alanlara girilen bilgiyi sürekli kontrol etmek
    document.querySelectorAll('#loginForm input').forEach(input => {
        input.addEventListener('input', function () {
            var errorSpan = this.nextElementSibling;
            if (this.classList.contains('invalid')) {
                this.classList.remove('invalid');
                errorSpan.textContent = '';
            }
        });
    });
    function validateField(id, errorMessage, isValid) {
        var input = document.getElementById(id);
        var errorSpan = document.getElementById(id + 'Error');
        if (!input.value.trim()) {
            input.classList.add('invalid');
            errorSpan.textContent = errorMessage;
            return false; // Eğer hata varsa, isValid false olarak döner
        } else {
            input.classList.remove('invalid');
            errorSpan.textContent = '';
            return isValid; // Mevcut isValid değerini döndürür
        }
    }
</script>

}
<style>
    body {
        font-family: 'Helvetica Neue', Arial, sans-serif;
        /* Modern bir yazı tipi */
        background-color: #f9f9f9;
        /* Daha açık bir arka plan */
        color: #333;
        /* Metin rengi */
        line-height: 1.6;
        /* Satır yüksekliği */
    }

    .text-danger {
        color: #e74c3c;
        /* Daha canlı bir kırmızı renk */
    }

    input.is-invalid,
    input.is-valid {
        border-width: 2px;
        /* Kalınlaştırılmış sınır */
        transition: border 0.3s;
        /* Yumuşak geçiş efekti */
    }

    input.is-invalid {
        border-color: #e74c3c;
        /* Hata durumunda sınır rengi */
    }

    input.is-valid {
        border-color: #2ecc71;
        /* Doğrulama geçtiğinde sınır rengi */
    }

    .login-container {
        max-width: 800px;

        /* Maksimum genişlik */
        margin: 40px auto;
        /* Otomatik merkezleme */
        padding: 20px;
        background-color: #ffffff;
        /* Beyaz arka plan */
        border-radius: 8px;
        /* Köşeleri yuvarlat */
        box-shadow: 0 0 15px rgba(0, 0, 0, 0.2);
        /* Daha belirgin bir gölge */
    }

    .login-title {
        margin-bottom: 20px;
        /* Başlık altı boşluk */
        text-align: center;
        color: #333;
        /* Metin rengi */
    }

    .form-group {
        margin-bottom: 15px;
        /* Form grupları arası boşluk */
    }

    .form-control {
        display: block;
        width: 100%;
        padding: 10px;
        font-size: 16px;
        border: 1px solid #ccc;
        /* Sınır kalınlığı ve rengi */
        border-radius: 4px;
        /* Köşeleri yuvarlat */
        transition: all 0.3s;
        /* Tüm geçişler için animasyon */
    }

    .form-control:focus {
        border-color: #3498db;
        /* Fokus durumunda sınır rengi */
        box-shadow: 0 0 8px rgba(52, 152, 219, 0.5);
        /* Fokus durumunda gölge efekti */
    }

    .btn-primary {
        padding: 10px 20px;
        background-color: #3498db;
        /* Buton rengi */
        color: white;
        border-radius: 5px;
        /* Köşeleri yuvarlat */
        border: none;
        cursor: pointer;
        transition: background-color 0.3s;
    }

    .btn-primary:hover {
        background-color: #2980b9;
        /* Buton hover durumunda rengi */
    }
</style>
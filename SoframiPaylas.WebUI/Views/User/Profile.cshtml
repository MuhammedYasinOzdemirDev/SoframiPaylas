@model UserProfileViewModel
<link rel="stylesheet" href="~/css/profile.css">

<div class="container mt-3">
    <div id="alertDiv" class="alert alert-danger" style="display: none;"></div>
</div>
@{
ViewBag.Title = "Profil";

ViewBag.ActivePage = "Profile";
}
<div class="profile-container">

    @await Component.InvokeAsync("ProfileSidebar", new { profilePicture = Model.ProfilePicture, userName =
    Model.UserName, activePage = ViewBag.ActivePage })
    <div class="profile-content">
        <div class="profile-card">
            <div class="profile-card-header">Account Details</div>
            <div class="profile-card-body">
                <form id="profileForm">
                    <input type="hidden" asp-for="@Model.ProfilePicture" value="@Model.ProfilePicture">
                    <div class="form-group">
                        <label asp-for="UserName">@Html.DisplayNameFor(m => m.UserName)</label>
                        <input class="form-control" asp-for="UserName" id="UserName" type="text"
                            placeholder="Kullanıcı adınızı girin" value="@Model.UserName" disabled />
                        <span id="UserNameError" class="text-danger"></span>
                    </div>
                    <div class="form-row mt-3">
                        <div class="form-group col-md-6">
                            <label asp-for="Name">@Html.DisplayNameFor(m => m.Name)</label>
                            <input class="form-control" asp-for="Name" id="Name" type="text" placeholder="Adınızı girin"
                                value="@Model.Name" disabled />
                            <span id="NameError" class="text-danger"></span>
                        </div>
                        <div class="form-group col-md-6">
                            <label asp-for="Surname">@Html.DisplayNameFor(m => m.Surname)</label>
                            <input class="form-control" asp-for="Surname" id="Surname" type="text"
                                placeholder="Soyadınızı girin" value="@Model.Surname" disabled />
                            <span id="SurnameError" class="text-danger"></span>
                        </div>
                    </div>

                    <div class="form-group mt-3">
                        <label asp-for="Email">@Html.DisplayNameFor(m => m.Email)</label>
                        <input class="form-control" asp-for="Email" id="Email" type="email"
                            placeholder="Email adresinizi girin" value="@Model.Email" disabled />
                        <span id="EmailError" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-3">
                        <label asp-for="Phone">@Html.DisplayNameFor(m => m.Phone)</label>
                        <input class="form-control" asp-for="Phone" id="Phone" type="tel"
                            placeholder="Telefon numaranızı girin" value="@Model.Phone" disabled />
                        <span id="PhoneError" class="text-danger"></span>
                    </div>

                    <div class="form-group mt-3">
                        <label asp-for="About">@Html.DisplayNameFor(m => m.About)</label>
                        <textarea class="form-control" asp-for="About" id="About" disabled>@Model.About</textarea>
                        <span id="AboutError" class="text-danger"></span>
                    </div>

                    <button id="editButton" class="btn btn-primary mt-3" type="button"
                        onclick="enableEditing()">Düzenle</button>
                    <button id="saveButton" class="btn btn-primary mt-3" type="submit" onclick="saveChanges()"
                        style="display:none;">Kaydet</button>
                </form>
            </div>
        </div>
    </div>
</div>
@section Module{
<script type="module">

    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-analytics.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js";
    // TODO: Add SDKs for Firebase products that you want to use
    // https://firebase.google.com/docs/web/setup#available-libraries

    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    const firebaseConfig = {
        apiKey: "AIzaSyAETB5ou7FUmvOo1tjagQyLA5JgMKah_so",
        authDomain: "sofrani-paylas.firebaseapp.com",
        databaseURL: "https://sofrani-paylas-default-rtdb.firebaseio.com",
        projectId: "sofrani-paylas",
        storageBucket: "sofrani-paylas.appspot.com",
        messagingSenderId: "542088840250",
        appId: "1:542088840250:web:b635167b5919f171556103",
        measurementId: "G-JK3VHJ4MR9"
    };

    // Initialize Firebase

    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
    const storage = getStorage(app);


    // Initialize Firebase


    let newImageUrl = '';
    let newImageFile = null;
    let dropzoneInstance;

    document.getElementById('uploadLink').addEventListener('click', function (event) {
        event.preventDefault(); // Varsayılan tıklama davranışını engelle

        Swal.fire({
            title: 'Resim Yükle',
            html: `
                                          <div class="upload-container">
                                              <div class="current-avatar-container mb-3">
                                                  <img src="${document.getElementById('currentAvatar').src}" alt="Current Avatar" class="current-avatar" id="swalCurrentAvatar">
                                              </div>
                                              <form id="dropzone" class="dropzone">
                                                  <div class="dz-message">Dosyanızı buraya sürükleyin veya tıklayın</div>
                                              </form>
                                          </div>
                                        `,
            showCancelButton: true,
            cancelButtonText: 'Geri',
            confirmButtonText: 'Kaydet',
            showConfirmButton: true,
            width: 600,
            didOpen: () => {
                Dropzone.autoDiscover = false;
                dropzoneInstance = new Dropzone("#dropzone", {
                    url: "/file/upload", // Dosya yükleme URL'si (gerçek backend olduğunda)
                    autoProcessQueue: false, // Otomatik olarak dosya yüklemesini durdur
                    maxFiles: 1,
                    acceptedFiles: "image/*",
                    init: function () {
                        this.on("addedfile", function (file) {
                            if (this.files.length > 1) {
                                this.removeFile(this.files[0]);
                            }
                            newImageFile = file;
                            newImageUrl = URL.createObjectURL(file);
                            document.getElementById('swalCurrentAvatar').src = newImageUrl; // Güncellenmiş resmi göster
                        });

                        this.on("error", function (file, response) {
                            Swal.fire('Hata', 'Yükleme sırasında bir hata oluştu.', 'error');
                        });
                    }
                });
            },
            preConfirm: () => {
                if (newImageFile) {
                    // Firebase'e yeni resmi yükle ve URL'yi al
                    return uploadImageToFirebase(newImageFile).then(url => {
                        newImageUrl = url;

                        // URL'yi backend'e gönder
                        return fetch('/User/UploadProfilePicture', {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({ fileUrl: newImageUrl })
                        })
                            .then(response => {
                                if (!response.ok) {
                                    throw new Error('Yükleme başarısız oldu');
                                }
                                return response.json();
                            })
                            .then(data => {
                                if (!data.success) {
                                    throw new Error(data.message);
                                }
                                Swal.fire({
                                    title: 'Başarılı!',
                                    text: 'Profil resminiz başarıyla yüklendi.',
                                    icon: 'success',
                                    confirmButtonText: 'Tamam'
                                }).then(() => {
                                    document.getElementById('currentAvatar').src = newImageUrl; // Ana sayfadaki resmi güncelle
                                });
                                return data;
                            })
                            .catch(error => {
                                Swal.showValidationMessage(`Yükleme başarısız oldu: ${error}`);
                            });

                    }).catch(error => {
                        Swal.showValidationMessage(`Yükleme başarısız oldu: ${error}`);
                    });
                } else {
                    Swal.showValidationMessage('Lütfen bir resim seçin.');
                }
            },
            willClose: () => {
                // Modal kapandığında newImageUrl'yi sıfırla
                newImageUrl = '';
                newImageFile = null;
                if (dropzoneInstance) {
                    dropzoneInstance.destroy(); // Dropzone örneğini yok et
                    dropzoneInstance = null;
                }
            }
        });
    });

    async function uploadImageToFirebase(file) {
        try {
            const storageRef = ref(storage, `images/${file.name}`);
            await uploadBytes(storageRef, file);
            const fileURL = await getDownloadURL(storageRef);
            return fileURL;
        } catch (error) {
            console.error("Error uploading image: ", error);
            throw error;
        }
    }
</script>}
@section Scripts {

<script>
    function enableEditing() {
        var formControls = document.querySelectorAll('#profileForm .form-control');
        formControls.forEach(function (control) {
            control.disabled = false;
        });
        document.getElementById('editButton').style.display = 'none';
        document.getElementById('saveButton').style.display = 'inline-block';
    }

    function disableEditing() {
        var formControls = document.querySelectorAll('#profileForm .form-control');
        formControls.forEach(function (control) {
            control.disabled = true;
        });
        document.getElementById('editButton').style.display = 'inline-block';
        document.getElementById('saveButton').style.display = 'none';
    }

    document.getElementById('profileForm').addEventListener('submit', function (event) {
        event.preventDefault();
        let isValid = true;

        // Alanları kontrol et
        isValid = validateField('UserName', 'Kullanıcı adı gereklidir.', isValid);
        isValid = validateField('Name', 'Ad gereklidir.', isValid);
        isValid = validateField('Surname', 'Soyad gereklidir.', isValid);
        isValid = validateField('Email', 'Email adresi gereklidir.', isValid);
        isValid = validateField('Phone', 'Telefon numarası gereklidir.', isValid);
        isValid = validateField('About', 'Hakkınızda bilgisi gereklidir.', isValid);

        if (isValid) {
            NProgress.start();
            var formData = new FormData(this);
            fetch('@Url.Action("Profile", "User")', {
                method: 'POST',
                body: formData
            })
                .then(response => response.json())
                .then(data => {
                    NProgress.done();
                    if (data.success) {
                        Swal.fire({
                            title: 'Profil Güncellendi!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                disableEditing();
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Profil Güncellendi!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        })
                        let errorMessage = data.message;
                        if (data.errors && data.errors.length > 0) {
                            errorMessage += '<ul>';
                            data.errors.forEach(function (error) {
                                errorMessage += '<li>' + error + '</li>';
                            });
                            errorMessage += '</ul>';
                        }
                        document.getElementById('alertDiv').innerHTML = errorMessage;
                        document.getElementById('alertDiv').style.display = 'block';
                    }
                })
                .catch(error => {
                    NProgress.done();
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Bir hata oluştu, lütfen daha sonra tekrar deneyiniz.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
        }
    });

    // Alanlara girilen bilgiyi sürekli kontrol etmek
    document.querySelectorAll('#profileForm input, #profileForm textarea').forEach(input => {
        input.addEventListener('input', function () {
            var errorSpan = this.nextElementSibling;
            if (this.classList.contains('invalid')) {
                this.classList.remove('invalid');
                if (errorSpan) {
                    errorSpan.textContent = '';
                }
            }
        });
    });

    function validateField(id, errorMessage, isValid) {
        var input = document.getElementById(id);
        var errorSpan = document.getElementById(id + 'Error');
        if (!input.value.trim()) {
            input.classList.add('invalid');
            if (!errorSpan) {
                errorSpan = document.createElement('span');
                errorSpan.id = id + 'Error';
                errorSpan.className = 'text-danger';
                input.parentNode.appendChild(errorSpan);
            }
            errorSpan.textContent = errorMessage;
            return false; // Eğer hata varsa, isValid false olarak döner
        } else {
            input.classList.remove('invalid');
            if (errorSpan) {
                errorSpan.textContent = '';
            }
            return isValid; // Mevcut isValid değerini döndürür
        }
    }

</script>


}
@model PostViewModel
<div class="container2">
    <div class="left-panel">
        <h1 id="post-title">@Model.Title</h1>
        <p id="post-description">@Model.Description</p>

        <p id="post-date">Date: @Model.FormattedDate</p>
        <p id="post-time">Time: @Model.Time</p>
        <p id="max-participants">Max Participants: @Model.MaxParticipants</p>
        <button id="complete-post-btn" class="btn btn-primary">Paylaşımı Sonlandır</button>
    </div>

    <div class="right-panel">
        <div class="message-section">
            <h2>Mesajlaşma</h2>
            <ul id="group-message-list"></ul>
            <div class="message-input">
                <input type="text" id="group-message-input" placeholder="Mesajınızı yazın...">
                <button id="send-group-message-btn" class="btn btn-secondary">Gönder</button>
            </div>
        </div>
    </div>
</div>

<div class="bottom-panel">
    <div class="announcement-section">
        <h2>Duyurular</h2>
        <ul id="announcement-list"></ul>
    </div>

    <div class="comments-section">
        <h2>Yorumlar</h2>
        <ul id="comments-list"></ul>
        <div class="comment-input">
            <input type="text" id="comment-input" placeholder="Yorumunuzu yazın...">
            <button id="send-comment-btn" class="btn btn-secondary">Gönder</button>
        </div>
    </div>
</div>

@section Scripts{
<script>
    // scripts.js

    document.addEventListener('DOMContentLoaded', () => {
        const postId = '@Model.PostId'; // Replace with the actual post ID

        const sendGroupMessageBtn = document.getElementById('send-group-message-btn');
        const sendCommentBtn = document.getElementById('send-comment-btn');
        const groupMessageInput = document.getElementById('group-message-input');
        const commentInput = document.getElementById('comment-input');
        const groupMessageList = document.getElementById('group-message-list');
        const commentsList = document.getElementById('comments-list');
        const announcementList = document.getElementById('announcement-list');

        // Group message sending
        sendGroupMessageBtn.addEventListener('click', async () => {
            const message = groupMessageInput.value;
            if (message) {
                try {
                    await connection.send('SendMessageToGroup', postId, message);
                    groupMessageInput.value = '';
                } catch (error) {
                    alert('Mesaj gönderilirken bir hata oluştu.');
                }
            }
        });

        // Comment sending
        sendCommentBtn.addEventListener('click', async () => {
            const comment = commentInput.value;
            if (comment) {
                try {
                    const response = await fetch(`/api/comments/${postId}`, {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json'
                        },
                        body: JSON.stringify({ content: comment })
                    });
                    const data = await response.json();
                    if (data.success) {
                        loadComments();
                        commentInput.value = '';
                    } else {
                        alert('Yorum gönderilirken bir hata oluştu: ' + data.message);
                    }
                } catch (error) {
                    alert('Yorum gönderilirken bir hata oluştu.');
                }
            }
        });

        // Loading comments
        function loadComments() {
            fetch(`/api/comments/${postId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        commentsList.innerHTML = '';
                        data.comments.forEach(comment => {
                            const listItem = document.createElement('li');
                            listItem.className = 'list-group-item';
                            const formattedDate = new Date(comment.createdAt).toLocaleString('tr-TR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            });
                            listItem.innerHTML = `
                                <div>
                                    <strong>${comment.userName}:</strong> ${comment.content}
                                    <br>
                                    <small>${formattedDate}</small>
                                </div>
                                <button class="delete-button" data-comment-id="${comment.id}">Sil</button>
                            `;
                            commentsList.appendChild(listItem);
                        });

                        // Attach delete button event listeners
                        document.querySelectorAll('.delete-button').forEach(button => {
                            button.addEventListener('click', function () {
                                const commentId = this.dataset.commentId;
                                deleteComment(commentId);
                            });
                        });
                    } else {
                        alert('Yorumlar yüklenirken bir hata meydana geldi: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Yorumlar yüklenirken bir hata meydana geldi: ' + error.message);
                });
        }

        // Deleting comments
        function deleteComment(commentId) {
            fetch(`/api/comments/${commentId}`, {
                method: 'DELETE',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        loadComments();
                    } else {
                        alert('Yorum silinirken bir hata meydana geldi: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Yorum silinirken bir hata meydana geldi: ' + error.message);
                });
        }

        loadComments();

        // Sample code to simulate receiving messages and announcements via SignalR
        // Replace this with actual SignalR connection handling code
        const connection = new signalR.HubConnectionBuilder().withUrl('/chathub').build();
        connection.on('ReceiveGroupMessage', (user, message) => {
            const li = document.createElement('li');
            li.textContent = `${user}: ${message}`;
            groupMessageList.appendChild(li);
        });
        connection.on('ReceiveAnnouncement', (announcement) => {
            const li = document.createElement('li');
            li.textContent = announcement;
            announcementList.appendChild(li);
        });
        connection.start().catch(err => console.error(err.toString()));
    });

</script>
}
<style>
    /* styles.css */

    body {
        font-family: Arial, sans-serif;
        background-color: #f4f4f4;
        margin: 0;
        padding: 0;
    }

    .container2 {
        display: flex;
        flex-direction: row;
        width: 90%;
        margin: 20px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .left-panel,
    .right-panel {
        flex: 1;
        margin: 10px;
    }

    .left-panel {
        border-right: 1px solid #ddd;
        padding-right: 20px;
    }

    .right-panel {
        padding-left: 20px;
    }

    h1,
    h2 {
        color: #333;
    }

    p {
        color: #666;
    }

    .btn {
        padding: 10px 20px;
        border: none;
        border-radius: 4px;
        cursor: pointer;
        margin-top: 10px;
        transition: background-color 0.3s;
    }

    .btn-primary {
        background-color: #007bff;
        color: white;
    }

    .btn-primary:hover {
        background-color: #0056b3;
    }

    .btn-secondary {
        background-color: #6c757d;
        color: white;
    }

    .btn-secondary:hover {
        background-color: #565e64;
    }

    .message-section,
    .comments-section,
    .announcement-section {
        margin-top: 20px;
    }

    .message-input,
    .comment-input {
        display: flex;
        gap: 10px;
        margin-top: 10px;
    }

    .message-input input,
    .comment-input input {
        flex: 1;
        padding: 10px;
        border: 1px solid #ddd;
        border-radius: 4px;
    }

    .message-input button,
    .comment-input button {
        padding: 10px 20px;
    }

    ul {
        list-style: none;
        padding: 0;
    }

    li {
        padding: 10px;
        border-bottom: 1px solid #ddd;
    }

    .bottom-panel {
        width: 90%;
        margin: 20px auto;
        background-color: #fff;
        padding: 20px;
        border-radius: 8px;
        box-shadow: 0 0 10px rgba(0, 0, 0, 0.1);
    }

    .announcement-section,
    .comments-section {
        margin-bottom: 20px;
    }

    .comments-section {
        background: #ffffff;
        padding: 20px;
        border-radius: 10px;
        box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1);
        margin-top: 30px;
    }

    .comments-section h2 {
        font-size: 1.8em;
        margin-bottom: 20px;
        color: #343a40;
        text-align: left;
        /* Başlığı sola hizala */
    }

    #comments-list {
        list-style: none;
        padding: 0;
        margin: 0;
    }

    #comments-list .list-group-item {
        background: #f1f1f1;
        border: none;
        border-radius: 5px;
        margin-bottom: 10px;
        padding: 15px;
        display: flex;
        justify-content: space-between;
        align-items: center;
        /* Silme butonunu hizalamak için */
        transition: background 0.3s ease-in-out;
    }

    #comments-list .list-group-item:hover {
        background: #e0e0e0;
    }

    #comments-list .list-group-item strong {
        font-size: 1.1em;
        color: #007bff;
        margin-bottom: 5px;
        align-self: flex-start;
    }

    #comments-list .list-group-item small {
        color: #6c757d;
        text-align: right;
        align-self: flex-end;
    }

    #comments-list .delete-button {
        padding: 5px 10px;
        border: none;
        border-radius: 4px;
        background-color: #dc3545;
        color: white;
        cursor: pointer;
        transition: background 0.3s ease-in-out;
    }

    #comments-list .delete-button:hover {
        background-color: #c82333;
    }
</style>
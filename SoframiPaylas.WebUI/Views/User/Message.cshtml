@model List<MessageViewModel>
    @{
    ViewBag.Title = "Mesajlar";
    ViewBag.ActivePage = "Message";
    }
    <link rel="stylesheet" href="~/css/profile.css">
    <div class="container mt-3">
        <div id="alertDiv" class="alert alert-danger" style="display: none;"></div>
    </div>
    <div class="profile-container">

        @await Component.InvokeAsync("ProfileSidebar", new { profilePicture = ViewBag.ImageUrl, userName =
        ViewBag.UserName, activePage = ViewBag.ActivePage })
        <div class="profile-content">

            <div class="profile-card">
                <div class="profile-card-header">
                    Mesajlar

                </div>
                <div class="profile-card-body">
                    <div class="message-list">
                        @foreach (var message in Model)
                        {
                        <div class="message-card">
                            <div class="message-header">

                                <span class="message-date">@message.Timestamp.ToString("dd MMM yyyy HH:mm")</span>
                                <button id="sendMessageBtn" class=" btn btn-success float-right"
                                    onclick="sendMessage('@message.ReceiverId','@message.SenderId')">Cevap
                                    Gönder</button>
                            </div>
                            <div class="message-body">
                                <p>@message.Content</p>
                            </div>
                        </div>
                        }
                    </div>
                </div>
            </div>

        </div>
    </div>
    @section Scripts {
    <script>
        function sendMessage(hostId, userId) {

            Swal.fire({
                title: 'Mesaj Gönder',
                input: 'textarea',
                inputPlaceholder: 'Mesajınızı yazın...',
                showCancelButton: true,
                confirmButtonText: 'Gönder',
                cancelButtonText: 'İptal',
                preConfirm: async (message) => {
                    if (!message) {
                        Swal.showValidationMessage('Mesaj boş olamaz');
                        return;
                    }
                    try {
                        const response = await fetch(`@Url.Action("Message","Post")`, {
                            method: 'POST',
                            headers: {
                                'Content-Type': 'application/json'
                            },
                            body: JSON.stringify({
                                senderId: hostId,
                                receiverId: userId,
                                content: message
                            })
                        });

                        const data = await response.json();
                        if (response.ok) {
                            Swal.fire('Başarılı', 'Mesaj gönderildi', 'success');
                        } else {
                            Swal.fire('Hata', `Mesaj gönderilirken bir hata meydana geldi: ${data.message}`, 'error');
                        }
                    } catch (error) {
                        Swal.fire('Hata', `Mesaj gönderilirken bir hata meydana geldi: ${error.message}`, 'error');
                    }
                }
            });
        }
    </script>
    }
    <style>
        .profile-container {
            display: flex;
            flex-direction: row;
        }

        .profile-content {
            flex: 1;
            margin-left: 20px;
        }

        .profile-card {
            border: 1px solid #ddd;
            border-radius: 4px;
            box-shadow: 0 1px 3px rgba(0, 0, 0, 0.1);
            margin-bottom: 20px;
        }

        .profile-card-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            border-bottom: 1px solid #ddd;
            padding: 15px;
            font-size: 18px;
            font-weight: bold;
        }

        .profile-card-body {
            padding: 15px;
        }

        .message-list {
            display: flex;
            flex-direction: column;
        }

        .message-card {
            background-color: #fafafa;
            border: 1px solid #e0e0e0;
            border-radius: 4px;
            margin-bottom: 15px;
            padding: 15px;
            transition: background-color 0.3s ease;
        }

        .message-card:hover {
            background-color: #f0f0f0;
        }

        .message-header {
            display: flex;
            justify-content: space-between;
            align-items: center;
            margin-bottom: 10px;
        }

        .message-sender {
            font-size: 14px;
            font-weight: bold;
        }

        .message-date {
            font-size: 12px;
            color: #888;
        }

        .message-status {
            font-size: 12px;
            color: #888;
            font-style: italic;
        }

        .message-body p {
            margin: 0;
            font-size: 14px;
        }
    </style>
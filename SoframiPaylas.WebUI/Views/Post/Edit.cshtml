@model PostEditViewModel
<link rel="stylesheet" href="~/css/Post/edit.css">
<div class="container">
    <div class="post-edit-form">
        <h4>Post Düzenle</h4>
        <form id="postForm" method="post" asp-action="Edit" enctype="multipart/form-data">
            <div class="form-group">
                <label asp-for="Title">Başlık</label>
                <input type="text" class="form-control" asp-for="Title" value="@Model.Title" required>
            </div>
            <div class="form-group">
                <label asp-for="Description">Açıklama</label>
                <textarea class="form-control" asp-for="Description" rows="3" value="@Model.Description"
                    required></textarea>
            </div>
            <div class="form-group">
                <label asp-for="Location">Konum</label>
                <input type="hidden" class="form-control" asp-for="Location" value="@Model.Location" required>
            </div>
            <div id="map"></div>
            <div class="form-group">
                <input id="pac-input" class="form-control" type="text" placeholder="Konum ara">
            </div>
            <div class="row">
                <div class="form-group col-6">
                    <label asp-for="FormattedDate">Tarih</label>
                    <input type="date" class="form-control" asp-for="FormattedDate" id="formattedDate" required>
                </div>
                <div class="form-group col-6">
                    <label asp-for="Time">Zaman</label>
                    <input type="time" class="form-control" asp-for="Time" value="@Model.Time" required>
                </div>
            </div>
            <div class="form-group">
                <label for="image">Resim Yükle</label>
                <input type="file" class="form-control-file" id="image" name="image" accept="image/*">
                <input type="hidden" asp-for="ImageUrl">
                <div class="image-preview">
                    <img src="@Model.ImageUrl" alt="Önceki Resim" id="imagePreview">
                </div>
            </div>
            <div class="form-group button-group">
                <button type="button" class="btn btn-primary" id="uploadButton">Güncelle</button>
                <button type="button" class="btn btn-secondary" id="cancelButton">İptal</button>
            </div>
        </form>
    </div>
</div>


@section Scripts {


<script type="module">
    import { initializeApp } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-app.js";
    import { getAnalytics } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-analytics.js";
    import { getStorage, ref, uploadBytes, getDownloadURL } from "https://www.gstatic.com/firebasejs/10.12.0/firebase-storage.js";
    // TODO: Add SDKs for Firebase products that you want to use
    // https://firebase.google.com/docs/web/setup#available-libraries

    // Your web app's Firebase configuration
    // For Firebase JS SDK v7.20.0 and later, measurementId is optional
    const firebaseConfig = {
        apiKey: "AIzaSyAETB5ou7FUmvOo1tjagQyLA5JgMKah_so",
        authDomain: "sofrani-paylas.firebaseapp.com",
        databaseURL: "https://sofrani-paylas-default-rtdb.firebaseio.com",
        projectId: "sofrani-paylas",
        storageBucket: "sofrani-paylas.appspot.com",
        messagingSenderId: "542088840250",
        appId: "1:542088840250:web:b635167b5919f171556103",
        measurementId: "G-JK3VHJ4MR9"
    };

    // Initialize Firebase

    const app = initializeApp(firebaseConfig);
    const analytics = getAnalytics(app);
    const storage = getStorage(app);
    $(document).ready(function () {
        // Date değerini ayarlamak
        var dateValue = '@Model.FormattedDate';
        if (dateValue) {
            $('#formattedDate').val(new Date(dateValue).toISOString().substring(0, 10));
        }

        $("#uploadButton").click(function () {
            var formData = new FormData();
            formData.append("PostId", "@Model.PostId");
            formData.append("Title", $("#Title").val());
            formData.append("Description", $("#Description").val());
            formData.append("Location", $("#Location").val());
            formData.append("FormattedDate", $("#formattedDate").val());
            formData.append("Time", $("#Time").val());
            var fileInput = $("#image")[0];

            if (fileInput.files.length > 0) {
                uploadImageToFirebase(fileInput.files[0]).then(url => {
                    formData.append("ImageUrl", url);


                    submitForm(formData);
                }).catch(error => {
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Resim yüklenirken bir hata oluştu: ' + error,
                        icon: 'error',
                        confirmButtonText: 'Tamam'
                    });
                });
            } else {
                formData.append("ImageUrl", '@Model.ImageUrl');
                submitForm(formData);
            }
        });
        $("#cancelButton").click(function () {
            window.location.href = '@Url.Action("Manage","Post")';
        });
        function submitForm(formData) {

            $.ajax({
                url: '@Url.Action("Edit","Post")?postId=@Model.PostId', // API endpoint URL

                type: "POST",
                data: formData,
                processData: false,
                contentType: false,// JSON string'e çevir

                processData: false,
                success: function (response) {
                    if (response.success) {
                        Swal.fire({
                            title: 'Başarılı!',
                            text: 'Post başarıyla güncellendi.',
                            icon: 'success',
                            confirmButtonText: 'Tamam'
                        }).then(() => {
                            location.reload();
                        });
                    } else {
                        Swal.fire({
                            title: 'Hata!',
                            text: response.message,
                            icon: 'error',
                            confirmButtonText: 'Tamam'
                        });
                    }
                },
                error: function (xhr, status, error) {
                    console.log(error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Bir hata oluştu, lütfen daha sonra tekrar deneyiniz.',
                        icon: 'error',
                        confirmButtonText: 'Tamam'
                    });
                }
            });
        }
        async function uploadImageToFirebase(file) {
            try {
                const storageRef = ref(storage, `images/${file.name}`);
                await uploadBytes(storageRef, file);
                const fileURL = await getDownloadURL(storageRef);
                return fileURL;
            } catch (error) {
                console.error("Error uploading image: ", error);
                throw error;
            }
        }

    });

    function initMap() {
        var location = $("#Location").val();
        var defaultLat = 41.0082;
        var defaultLng = 28.9784;

        if (location) {
            var locParts = location.split('-');
            if (locParts.length === 2) {
                defaultLat = parseFloat(locParts[0].replace(',', '.'));
                defaultLng = parseFloat(locParts[1].replace(',', '.'));
            }
        }

        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: defaultLat, lng: defaultLng },
            zoom: 8
        });

        var marker = new google.maps.Marker({
            position: { lat: defaultLat, lng: defaultLng },
            map: map,
            draggable: true
        });

        var input = document.getElementById('pac-input');
        var autocomplete = new google.maps.places.Autocomplete(input);
        autocomplete.bindTo('bounds', map);

        autocomplete.addListener('place_changed', function () {
            var place = autocomplete.getPlace();
            if (!place.geometry) {
                console.log("No details available for input: '" + place.name + "'");
                return;
            }

            if (place.geometry.viewport) {
                map.fitBounds(place.geometry.viewport);
            } else {
                map.setCenter(place.geometry.location);
                map.setZoom(17);
            }

            marker.setPosition(place.geometry.location);
            $("#Location").val(place.geometry.location.lat() + "-" + place.geometry.location.lng());
        });

        google.maps.event.addListener(map, 'click', function (event) {
            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            $("#Location").val(latitude + "-" + longitude);
            marker.setPosition(event.latLng);
        });

        google.maps.event.addListener(marker, 'dragend', function (event) {
            var latitude = event.latLng.lat();
            var longitude = event.latLng.lng();
            $("#Location").val(latitude + "-" + longitude);
        });
    }

    google.maps.event.addDomListener(window, 'load', initMap);

</script>
}
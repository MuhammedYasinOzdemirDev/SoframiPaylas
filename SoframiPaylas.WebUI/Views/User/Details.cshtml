@model PostViewModel
@using System.Globalization
<link rel="stylesheet" href="~/css/User/details.css">
<div class="container2">
    <div class="left-panel">
        <h1 id="post-title">@Model.Title</h1>
        <p id="post-description"><strong>Açıklama:</strong>@Model.Description</p>
        <div id="map" style="height: 300px;" class="mb-3 mt-3"></div>
        @{
        DateTime date;
        string formattedDate = string.Empty;
        if (DateTime.TryParse(Model.FormattedDate, out date))
        {
        formattedDate = date.ToString("dd MMMM yyyy", new CultureInfo("tr-TR"));
        }
        }
        <p id="post-date"><strong>Tarih</strong> @formattedDate</p>
        <p id="post-time"><strong>Saat:</strong> @Model.Time</p>
        <p id="max-participants"><strong>Katılımcılar:</strong> @Model.Participants.Count /
            @Model.MaxParticipants</p>
        @if(Model.PostStatus){
        <button id="complete-post-btn" class="btn btn-primary" onclick="leave('@Model.PostId')">Ayrıl</button>}
    </div>

    <div class="right-panel">
        @if(Model.PostStatus){
        <div class="message-section">
            <h2>Paylaşım Sahibine Mesaj Yaz</h2>
            <ul id="group-message-list"></ul>

            <div class="message-input">
                <input type="text" id="group-message-input" placeholder="Mesajınızı yazın...">
                <button id="send-group-message-btn" class="btn btn-secondary"
                    onclick="sendMessage('@Model.HostID', '@ViewBag.UserId')">Gönder</button>
            </div>
        </div>}
        <div class="menu mt-3">
            <h2>Menü</h2>
            <ul class="list-group">
                @foreach (var food in ViewBag.RelatedFoods)
                {
                <li class="list-group-item d-flex justify-content-between">
                    <div>
                        <strong>@food.Title</strong>
                        <p>@food.Description</p>
                    </div>

                </li>
                }
            </ul>
        </div>
    </div>
</div>

<div class="bottom-panel container2">
    <div class="announcement-section left-panel">
        <h2>Duyurular</h2>
        <ul id="announcement-list"></ul>
    </div>

    <div class="comments-section right-panel">
        <h2>Yorumlar</h2>
        @if(Model.PostStatus){
        <div class="comment-input mb-3">
            <input type="text" id="comment-input" placeholder="Yorumunuzu yazın...">
            <button id="send-comment-btn" class="btn btn-secondary" onclick="CreateComments()">Gönder</button>
        </div>}
        <ul id="comments-list"></ul>
    </div>
</div>

@section Scripts{
<script>
    document.addEventListener('DOMContentLoaded', () => {
        const postId = '@Model.PostId'; // Replace with the actual post ID


        // Yorumları yükle
        function loadComments() {

            fetch(`@Url.Action("GetCommentsByPostId","Comment")?postId=${postId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const commentsList = document.getElementById('comments-list');
                        commentsList.innerHTML = '';
                        data.comments.forEach(comment => {
                            const listItem = document.createElement('li');
                            listItem.className = 'list-group-item';
                            const formattedDate = new Date(comment.createdAt).toLocaleString('tr-TR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            });
                            listItem.innerHTML = `
                                <div>
                                    <strong>${comment.userName}:</strong> ${comment.content}
                                    <br>
                                    <small>${formattedDate}</small>
                                </div>
                    
                            `;
                            commentsList.appendChild(listItem);
                        });

                        // Silme butonlarına olay dinleyicisi ekle
                        document.querySelectorAll('.delete-button').forEach(button => {
                            button.addEventListener('click', function () {
                                const commentId = this.dataset.commentId;
                                deleteComment(commentId);
                            });
                        });
                    } else {
                        alert('Yorumlar yüklenirken bir hata meydana geldi: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Yorumlar yüklenirken bir hata meydana geldi: ' + error.message);
                });
        }


        loadComments();
        function initMap() {
            // Razor ile elde edilen Latitude ve Longitude değerlerini JavaScript değişkenlerine atayın
            var latitude = parseFloat('@Model.Latitude');
            var longitude = parseFloat('@Model.Longitude');

            var map = new google.maps.Map(document.getElementById('map'), {
                center: { lat: latitude, lng: longitude },
                zoom: 12
            });

            var marker = new google.maps.Marker({
                position: { lat: latitude, lng: longitude },
                map: map
            });
        }


        initMap();
        async function loadAnnouncements() {
            try {
                const response = await fetch(`@Url.Action("DuyurulariGetir","Post")?postId=@Model.PostId`);
                const data = await response.json();
                const announcementList = document.getElementById('announcement-list');
                announcementList.innerHTML = '';

                if (response.ok && data.success) {
                    data.announcements.forEach(announcement => {
                        const listItem = document.createElement('li');
                        listItem.className = 'announcement-item';
                        const formattedDate = new Date(announcement.timestamp).toLocaleString('tr-TR', {
                            year: 'numeric',
                            month: 'long',
                            day: 'numeric',
                            hour: '2-digit',
                            minute: '2-digit',
                            second: '2-digit'
                        });
                        listItem.innerHTML = `
                        <div class="announcement-content">${announcement.content}</div>
                        <div class="announcement-timestamp">${formattedDate}</div>
                        `;
                        announcementList.appendChild(listItem);
                    });
                } else {
                    announcementList.innerHTML = '<li class="announcement-item">Duyuru bulunamadı.</li>';
                }
            } catch (error) {
                console.error('Error loading announcements:', error);
                const announcementList = document.getElementById('announcement-list');
                announcementList.innerHTML = '<li class="announcement-item">Duyurular yüklenirken bir hata oluştu.</li>';
            }
        }

        loadAnnouncements();



    });
    function CreateComments() {
        alert("d");
        const commentContent = document.getElementById('comment-input').value;
        const newComment = {
            postId: '@Model.PostId',

            content: commentContent
        };

        fetch('@Url.Action("AddComment","Comment")', {
            method: 'POST',
            headers: {
                'Content-Type': 'application/json'
            },
            body: JSON.stringify(newComment)
        })
            .then(response => response.json())
            .then(data => {
                if (data.success) {
                    location.reload();

                } else {
                    alert('Yorumlar yüklenirken bir hata meydana geldi: ' + data.message);
                }
            })
            .catch(error => {
                alert('Yorumlar yüklenirken bir hata meydana geldi: ' + error.message);
            });
    }
    async function sendMessage(hostId, userId) {

        const message = document.getElementById('group-message-input').value;
        try {
            const response = await fetch(`@Url.Action("Message","Post")`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify({
                    senderId: hostId,
                    receiverId: userId,
                    content: message
                })
            });

            const data = await response.json();
            if (response.ok) {
                Swal.fire('Başarılı', 'Mesaj gönderildi', 'success');
            } else {
                Swal.fire('Hata', `Mesaj gönderilirken bir hata meydana geldi: ${data.message}`, 'error');
            }
        } catch (error) {
            Swal.fire('Hata', `Mesaj gönderilirken bir hata meydana geldi: ${error.message}`, 'error');
        }
    }
    async function leave(postId) {
        const result = await Swal.fire({
            title: 'Emin misiniz?',
            text: "Bu paylaşımdan ayrılmak istediğinizden emin misiniz?",
            icon: 'warning',
            showCancelButton: true,
            confirmButtonText: 'Evet, ayrıl!',
            cancelButtonText: 'Hayır, iptal et',
            reverseButtons: true
        });

        if (result.isConfirmed) {
            try {
                const response = await fetch(`@Url.Action("Leave","Participant")?postId=${postId}`, {
                    method: 'DELETE',
                    headers: {
                        'Content-Type': 'application/json'
                    }
                });

                const data = await response.json();
                if (response.ok && data.success) {
                    await Swal.fire(
                        'Ayrıldınız!',
                        'Paylaşımdan başarıyla ayrıldınız.',
                        'success'
                    );

                    window.location.href = '@Url.Action("Index","Home")';
                } else {
                    Swal.fire(
                        'Hata!',
                        `Ayrılırken bir hata oluştu: ${data.message}`,
                        'error'
                    );
                }
            } catch (error) {
                Swal.fire(
                    'Hata!',
                    `Ayrılırken bir hata oluştu: ${error.message}`,
                    'error'
                );
            }
        }
    }
</script>
}
@model PostViewModel
@using System.Globalization
@{
var isAuthenticated = HttpContextAccessor.HttpContext.User.Identity.IsAuthenticated;

}
<link rel="stylesheet" href="~/css/Home/details.css">
<div class="container">
    <div class="row">
        <!-- Post Details Section -->
        <div class="col-md-8">
            <div class="post-detail">
                <h2 class="text-center">@Model.Title</h2>
                <div class="post-image">
                    <img src="@Model.Image" alt="@Model.Title" class="img-fluid">
                </div>
                <div class="post-info mt-3">

                    <p><strong>Yayınlayan:</strong><a class="profile-link" asp-action="Profile"
                            asp-route-userId="@ViewBag.Host.UserID">
                            @ViewBag.Host.UserName</a></p>
                    <p><strong>Açıklama:</strong> @Model.Description</p>

                    <div id="map" style="height: 400px; margin-bottom: 20px;"></div>
                    <p><strong>Tarih:</strong> @{
                        DateTime date;
                        string formattedDate = string.Empty;
                        if (DateTime.TryParse(Model.FormattedDate, out date))
                        {
                        formattedDate = date.ToString("dd MMMM yyyy", new CultureInfo("tr-TR"));
                        }
                        }
                        @formattedDate</p>
                    <p><strong>Zaman:</strong> @{
                        TimeSpan time;
                        string formattedTime = string.Empty;
                        if (TimeSpan.TryParse(Model.Time, out time))
                        {
                        formattedTime = time.ToString(@"hh\:mm");
                        }
                        }
                        @formattedTime</p>
                    <p><strong>Maksimum Katılımcı Sayısı:</strong> @Model.MaxParticipants</p>
                    <p><strong>Katılımcılar:</strong> @Model.Participants.Count / @Model.MaxParticipants</p>
                </div>
                @if(Model.PostStatus){
                <div class="text-center mt-4" id="content">

                    <button id="participateButton" class="btn-join">Katıl</button>
                    <div id="loginPrompt">
                        <p> Katılmak için lütfen giriş yapın.</p>
                        <button id="loginButton" class="btn-join">Giriş Yap</button>
                    </div>

                </div>}
            </div>
        </div>
        <div class="col-md-4">
            <div class="menu">
                <h4>Menü</h4>
                <ul class="list-group">
                    @foreach (var food in ViewBag.RelatedFoods)
                    {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@food.Title</strong>
                            <p>@food.Description</p>
                        </div>

                    </li>
                    }
                </ul>
            </div>
            <div class="participants">
                <h4>Katılımcılar</h4>
                <ul class="list-group">
                    @if(ViewBag.Participants.Count == 0){
                    <div class="alert alert-warning">Katılımcı Yok.</div>
                    }
                    @foreach (var participant in ViewBag.Participants)
                    {
                    <li class="list-group-item d-flex justify-content-between align-items-center">
                        <div>
                            <strong>@participant.UserName</strong>

                        </div>

                    </li>
                    }

                </ul>
            </div>
        </div>
    </div>
    <!-- Comments Section -->
    <div class="comments-section mt-3">
        <h3>Yorumlar</h3>
        <ul id="comments-list" class="list-group mb-3">
            <!-- Yorumlar burada gösterilecek -->
        </ul>
        @if(Model.PostStatus){
        @if (isAuthenticated)
        {
        <div class="comment-input mb-3">
            <input type="text" id="comment-content" class="form-control" placeholder="Yorumunuzu yazın...">
            <button id="add-comment-btn" class="btn btn-primary mt-2">Yorum Ekle</button>
        </div>
        }
        else
        {
        <p>Lütfen yorum yapmak için <a href="@Url.Action(" Login", "Auth" )">giriş yapın</a>.</p>
        }}
    </div>

</div>



@section Scripts {
<script>
    document.addEventListener('DOMContentLoaded', function () {
        const isAuthenticated = '@isAuthenticated' === 'True';
        const participateButton = document.getElementById('participateButton');
        const loginPrompt = document.getElementById('loginPrompt');
        const loginButton = document.getElementById('loginButton');
        // Yorumları yükle
        function loadComments() {
            fetch(`@Url.Action("GetCommentsByPostId","Comment")?postId=@Model.PostId`)
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        const commentsList = document.getElementById('comments-list');
                        commentsList.innerHTML = '';
                        data.comments.forEach(comment => {
                            const listItem = document.createElement('li');
                            listItem.className = 'list-group-item';
                            const formattedDate = new Date(comment.createdAt).toLocaleString('tr-TR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            });
                            listItem.innerHTML = `<div><strong>${comment.userName}:</strong> ${comment.content}</div> <small>${formattedDate}</small>`;
                            commentsList.appendChild(listItem);

                        });
                    } else {
                        alert('Yorumlar yüklenirken bir hata meydana geldi: ' + data.message);
                    }
                })
                .catch(error => {
                    alert('Yorumlar yüklenirken bir hata meydana geldi: ' + error.message);
                });
        }
        if (isAuthenticated) {
            var postId = '@Model.PostId';

            fetch(`@Url.Action("RequestStatus","Participant")?postId=${postId}`)
                .then(response => response.json())
                .then(data => {

                    var requestStatus = data.status;


                    if (requestStatus === -1) {
                        // İstek yapılmamış
                        participateButton.style.display = 'inline-block';
                        participateButton.disabled = false;
                        participateButton.textContent = 'Katıl';
                    } else if (requestStatus === 0) {
                        // İstek beklemede
                        participateButton.style.display = 'inline-block';
                        participateButton.disabled = true;
                        participateButton.textContent = 'İstek Beklemede';
                        participateButton.classList.add('btn-disabled');
                    } else if (requestStatus === 1) {
                        // İstek onaylanmış
                        participateButton.style.display = 'inline-block';
                        participateButton.disabled = true;
                        participateButton.textContent = 'İstek Onaylanmış';
                        participateButton.classList.add('btn-disabled');
                    } else if (requestStatus === 2) {
                        // İstek reddedilmiş
                        participateButton.style.display = 'inline-block';
                        participateButton.disabled = true;
                        participateButton.textContent = 'İstek Reddedilmiş';
                        participateButton.classList.add('btn-disabled');
                    }
                })
                .catch(error => console.error('Error:', error));
            participateButton.style.display = 'inline-block';
            loginPrompt.style.display = 'none';
            loginButton.style.display = 'none';
            document.getElementById('add-comment-btn').addEventListener('click', function () {
                const commentContent = document.getElementById('comment-content').value;
                const newComment = {
                    postId: '@Model.PostId',

                    content: commentContent
                };

                fetch('@Url.Action("AddComment","Comment")', {
                    method: 'POST',
                    headers: {
                        'Content-Type': 'application/json'
                    },
                    body: JSON.stringify(newComment)
                })
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const commentsList = document.getElementById('comments-list');
                            const listItem = document.createElement('li');
                            listItem.className = 'list-group-item';
                            const formattedDate = new Date(data.comment.createdAt).toLocaleString('tr-TR', {
                                year: 'numeric',
                                month: 'long',
                                day: 'numeric',
                                hour: '2-digit',
                                minute: '2-digit',
                                second: '2-digit'
                            });
                            listItem.innerHTML = `<div><strong>${data.comment.userName}:</strong> ${data.comment.content}</div> <small>${formattedDate}</small>`;
                            commentsList.appendChild(listItem);
                            document.getElementById('comment-content').value = '';
                        } else {
                            alert('Yorum eklenirken bir hata meydana geldi: ' + data.message);
                        }
                    })
                    .catch(error => {
                        alert('Yorum eklenirken bir hata meydana geldi: ' + error.message);
                    });
            });

            loadComments();
        } else {
            loginPrompt.style.display = 'block';
            loginButton.style.display = 'inline-block';
            participateButton.style.display = 'none';
        }

        loginButton.addEventListener('click', function () {
            const currentUrl = window.location.href;
            window.location.href = '@Url.Action("Login", "Auth")' + '?returnUrl=' + encodeURIComponent(currentUrl);
        });

        participateButton.addEventListener('click', function () {


            fetch('@Url.Action("Join","Participant", new { postId = Model.PostId })', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                }
            })
                .then(response => response.json())
                .then(data => {
                    if (data.success) {
                        NProgress.done();
                        Swal.fire({
                            title: 'Katılma isteği başarıyla gönderildi!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        })
                        location.reload();
                    } else {
                        NProgress.done();
                        Swal.fire({
                            title: 'Error!',
                            text: data.message || "An error occurred.",
                            icon: 'error',
                            confirmButtonText: 'OK'
                        });
                    }
                })
                .catch(error => {
                    NProgress.done();
                    console.error('Error:', error);
                    alert('Bir hata oluştu, lütfen daha sonra tekrar deneyiniz.');
                });
        });
    });
</script>
<script>
    function initMap() {
        // Razor ile elde edilen Latitude ve Longitude değerlerini JavaScript değişkenlerine atayın
        var latitude = parseFloat('@Model.Latitude');
        var longitude = parseFloat('@Model.Longitude');

        var map = new google.maps.Map(document.getElementById('map'), {
            center: { lat: latitude, lng: longitude },
            zoom: 12
        });

        var marker = new google.maps.Marker({
            position: { lat: latitude, lng: longitude },
            map: map
        });
    }

    // Google Maps API yüklemesi
    function loadGoogleMaps() {
        var script = document.createElement('script');
        script.src = `https://maps.googleapis.com/maps/api/js?key=AIzaSyB8fnr_8wb9KuVpwj1b1hhtJGCMpQ9td5k&callback=initMap`;
        script.defer = true;
        document.head.appendChild(script);
    }

    document.addEventListener('DOMContentLoaded', function () {
        loadGoogleMaps();
    });

</script>
}
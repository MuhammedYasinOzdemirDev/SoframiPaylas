@model SecurityViewModel
@{
ViewBag.Title = "Hesap Güvenliği";

ViewBag.ActivePage = "Security";
}
<link rel="stylesheet" href="~/css/profile.css">
<div class="container mt-3">
    <div id="alertDiv" class="alert alert-danger" style="display: none;"></div>
</div>
<div class="profile-container">

    @await Component.InvokeAsync("ProfileSidebar", new { profilePicture = Model.ProfilePicture, userName =
    Model.UserName, activePage = ViewBag.ActivePage })
    <div class="profile-content">

        <div class="profile-card">
            <div class="profile-card-header">Hesap Güvenliği</div>
            <div class="profile-card-body">
                <hr class="mt-0 mb-4">
                <div class="profile-card">
                    <div class="profile-card-header2">Change Password</div>
                    <div class="profile-card-body">
                        <form id="changePasswordForm">

                            <div class="mb-3 form-group">
                                <label class="small mb-1" for="currentPassword">Current Password</label>
                                <input class="form-control" id="currentPassword" type="password"
                                    placeholder="Enter current password">
                            </div>
                            <!-- Form Group (new password)-->
                            <div class="mb-3 form-group">
                                <label class="small mb-1" for="newPassword">New Password</label>
                                <input class="form-control" id="newPassword" type="password"
                                    placeholder="Enter new password">
                            </div>
                            <!-- Form Group (confirm password)-->
                            <div class="mb-3 form-group">
                                <label class="small mb-1" for="confirmNewPassword">Confirm Password</label>
                                <input class="form-control" id="confirmNewPassword" type="password"
                                    placeholder="Confirm new password">
                            </div>
                            <button class="btn btn-primary" type="submit">Save</button>
                        </form>
                    </div>
                </div>
                <hr class="mt-0 mb-4">
                <!-- Security preferences card-->
                <div class="profile-card mb-4">
                    <div class="profile-card-header2">Güvenlik Tercihleri</div>
                    <div class="profile-card-body">
                        <!-- Account privacy optinos-->
                        <h5 class="mb-1">Account Privacy</h5>

                        <form>
                            <div class="form-check">
                                <input class="form-check-input" id="radioPrivacy1" type="radio" name="radioPrivacy"
                                    checked="">
                                <label class="form-check-label" for="radioPrivacy1">Public (posts are
                                    available to all
                                    users)</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" id="radioPrivacy2" type="radio" name="radioPrivacy">
                                <label class="form-check-label" for="radioPrivacy2">Private (posts are
                                    available to only
                                    users in your groups)</label>
                            </div>
                        </form>
                        <hr class="my-4">
                        <!-- Data sharing options-->
                        <h5 class="mb-1">Data Sharing</h5>

                        <form>
                            <div class="form-check">
                                <input class="form-check-input" id="radioUsage1" type="radio" name="radioUsage"
                                    checked="">
                                <label class="form-check-label" for="radioUsage1">Yes, share data and crash
                                    reports with app
                                    developers</label>
                            </div>
                            <div class="form-check">
                                <input class="form-check-input" id="radioUsage2" type="radio" name="radioUsage">
                                <label class="form-check-label" for="radioUsage2">No, limit my data sharing
                                    with app
                                    developers</label>
                            </div>
                        </form>
                    </div>
                </div>
            </div>

        </div>
    </div>


</div>
@section Scripts {

<script>

    document.getElementById('changePasswordForm').addEventListener('submit', function (event) {
        event.preventDefault();
        let isValid = true;

        // Alanları kontrol et
        isValid = validateField('currentPassword', 'Mevcut parola gereklidir', isValid);
        isValid = validateField('newPassword', 'Yeni Parola alanı gereklidir.', isValid);
        isValid = validateConfirmPassword('newPassword', 'confirmNewPassword', 'Şifreler eşleşmiyor.', isValid);

        if (isValid) {

            NProgress.start();
            const formData = {
                CurrentPassword: document.getElementById('currentPassword').value,
                NewPassword: document.getElementById('newPassword').value,
                ConfirmNewPassword: document.getElementById('confirmNewPassword').value
            };
            console.log(formData);

            fetch('@Url.Action("ChangePassword", "Auth")', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(formData)
            })
                .then(response => response.json())
                .then(data => {
                    NProgress.done();
                    if (data.success) {
                        Swal.fire({
                            title: 'Parola Güncellendi!',
                            text: data.message,
                            icon: 'success',
                            confirmButtonText: 'OK'
                        }).then((result) => {
                            if (result.isConfirmed) {
                                if (data.isLogin) {
                                    window.location.reload();
                                } else {
                                    window.location.href = '@Url.Action("Login","Auth")';
                                }
                            }
                        });
                    } else {
                        Swal.fire({
                            title: 'Parola Güncelleme Başarız!',
                            text: data.message,
                            icon: 'error',
                            confirmButtonText: 'OK'
                        })
                        let errorMessage = data.message;
                        if (data.errors && data.errors.length > 0) {
                            errorMessage += '<ul>';
                            data.errors.forEach(function (error) {
                                errorMessage += '<li>' + error + '</li>';
                            });
                            errorMessage += '</ul>';
                        }
                        document.getElementById('alertDiv').innerHTML = errorMessage;
                        document.getElementById('alertDiv').style.display = 'block';
                    }
                })
                .catch(error => {
                    NProgress.done();
                    console.error('Error:', error);
                    Swal.fire({
                        title: 'Hata!',
                        text: 'Bir hata oluştu, lütfen daha sonra tekrar deneyiniz.',
                        icon: 'error',
                        confirmButtonText: 'OK'
                    });
                });
        }
    });

    // Alanlara girilen bilgiyi sürekli kontrol etmek
    document.querySelectorAll('#changePasswordForm input').forEach(input => {
        input.addEventListener('input', function () {
            var errorSpan = this.nextElementSibling;
            if (this.classList.contains('invalid')) {
                this.classList.remove('invalid');
                if (errorSpan) {
                    errorSpan.textContent = '';
                }
            }
        });
    });

    function validateField(id, errorMessage, isValid) {
        var input = document.getElementById(id);
        var errorSpan = document.getElementById(id + 'Error');
        if (!input.value.trim()) {
            input.classList.add('invalid');
            if (!errorSpan) {
                errorSpan = document.createElement('span');
                errorSpan.id = id + 'Error';
                errorSpan.className = 'text-danger';
                input.parentNode.appendChild(errorSpan);
            }
            errorSpan.textContent = errorMessage;
            return false; // Eğer hata varsa, isValid false olarak döner
        } else {
            input.classList.remove('invalid');
            if (errorSpan) {
                errorSpan.textContent = '';
            }
            return isValid; // Mevcut isValid değerini döndürür
        }
    }
    function validateConfirmPassword(passwordId, confirmPasswordId, errorMessage, isValid) {
        var password = document.getElementById(passwordId);
        var confirmPassword = document.getElementById(confirmPasswordId);
        var errorSpan = document.getElementById(confirmPasswordId + 'Error');
        if (confirmPassword.value.trim() !== password.value.trim()) {
            confirmPassword.classList.add('invalid');
            if (!errorSpan) {
                errorSpan = document.createElement('span');
                errorSpan.id = confirmPasswordId + 'Error';
                errorSpan.className = 'text-danger';
                confirmPassword.parentNode.appendChild(errorSpan);
            }
            errorSpan.textContent = errorMessage;
            return false; // Eğer hata varsa, isValid false olarak döner
        } else {
            confirmPassword.classList.remove('invalid');
            if (errorSpan) {
                errorSpan.textContent = '';
            }
            return isValid; // Mevcut isValid değerini döndürür
        }
    }

</script>


}